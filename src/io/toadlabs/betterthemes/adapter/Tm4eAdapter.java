package io.toadlabs.betterthemes.adapter;

import java.io.*;
import java.util.*;

import io.toadlabs.betterthemes.*;
import io.toadlabs.betterthemes.theme.*;
import io.toadlabs.betterthemes.utils.*;
import org.eclipse.core.runtime.preferences.*;
import org.eclipse.tm4e.registry.*;
import org.eclipse.tm4e.ui.*;
import org.eclipse.tm4e.ui.themes.*;
import org.osgi.service.prefs.*;

public final class Tm4eAdapter extends ThemeAdapter {

	private static final String PREFIX = "BetterThemes_";

	@Override
	public void apply(ThemeData theme, IEclipsePreferences preferences) throws BackingStoreException {
		try {
			IThemeManager textMateThemes = TMUIPlugin.getThemeManager();
			for(ITheme unregisterTheme : textMateThemes.getThemes()) {
				if(unregisterTheme.getId().startsWith(PREFIX)) {
					textMateThemes.unregisterTheme(unregisterTheme);
				}
			}

			ITheme textMateTheme = new Theme(PREFIX + UUID.randomUUID().toString().replace('-', '_'), generateTheme(theme), theme.getName() + " (generated by BetterThemes)", false, true);
			textMateThemes.registerTheme(textMateTheme);

			for(IGrammarDefinition definition : TMEclipseRegistryPlugin.getGrammarRegistryManager().getDefinitions()) {
				textMateThemes.registerThemeAssociation(
						new ThemeAssociation(textMateTheme.getId(), definition.getScopeName(), false));
				textMateThemes.registerThemeAssociation(
						new ThemeAssociation(textMateTheme.getId(), definition.getScopeName(), true));
			}
//			for(IThemeAssociation association : themes.getAllThemeAssociations()) {
//				themes.unregisterThemeAssociation(association);
//				themes.registerThemeAssociation(new ThemeAssociation("BetterThemes", association.getScopeName(), false));
//			}

			//			for (var themez : themes.getAllThemeAssociations()) {
//				System.out.println(themez.getScopeName());
//			}
		}
		catch(IOException error) {
			BetterThemes.get().getLog().error("Could not write TM4E file");
		}
		TMUIPlugin.getThemeManager().save();
		super.apply(theme, preferences);
	}

	private String generateTheme(ThemeData theme) throws IOException {
		File file = BetterThemes.get().getStateLocation().append("tm4e.css").toFile();
		try(FileWriter writer = new FileWriter(file)) {
			writer.write(".comment{" + Utils.cssStyle(theme.get(ThemeKey.COMMENT)) + "}");
			writer.write(".comment.block{" + Utils.cssStyle(theme.get(ThemeKey.MULTILINE_COMMENT)) + "}");
			writer.write(".keyword.control,.constant.language,.storage{" + Utils.cssStyle(theme.get(ThemeKey.KEYWORD)) + "}");
			writer.write(".string,.regexp{" + Utils.cssStyle(theme.get(ThemeKey.STRING)) + "}");
			writer.write(".keyword.operator{" + Utils.cssStyle(theme.get(ThemeKey.OPERATOR)) + "}");
			writer.write(".support.type,.support.class,.entity.name.class,.entity.other.inherited-class{" + Utils.cssStyle(theme.get(ThemeKey.CLASS)) + "}");
			writer.write(".entity.name.interface{" + Utils.cssStyle(theme.get(ThemeKey.INTERFACE)) + "}");
			writer.write(".name.enum{" + Utils.cssStyle(theme.get(ThemeKey.ENUM)) + "}");
			writer.write(".support.function,.entity.name.function{" + Utils.cssStyle(theme.get(ThemeKey.METHOD)) + "}");
			writer.write(".variable.property{" + Utils.cssStyle(theme.get(ThemeKey.FIELD)) + "}");
			writer.write(".variable{" + Utils.cssStyle(theme.get(ThemeKey.LOCAL_VARIABLE)) + "}");
			writer.write(".variable.parameter{" + Utils.cssStyle(theme.get(ThemeKey.ARGUMENT)) + "}");
			writer.write(".entity.name.tag{" + Utils.cssStyle(theme.get(ThemeKey.XML_TAG)) + "}");
			writer.write(".entity.other.attribute-name{" + Utils.cssStyle(theme.get(ThemeKey.XML_ATTRIBUTE)) + "}");
			// TODO finish
		}

		return file.getAbsolutePath();
	}

}
